import java.util.Base64;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.xml.namespace.QName;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.handler.soap.SOAPHandler;
import javax.xml.ws.handler.soap.SOAPMessageContext;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPFault;
import javax.xml.soap.SOAPFactory;
import javax.xml.ws.soap.SOAPFaultException;

public class BasicAuthHandler implements SOAPHandler<SOAPMessageContext> {

    private static final String VALID_USERNAME = "team1";  // Replace with actual username
    private static final String VALID_PASSWORD = "secure123"; // Replace with actual password

    @Override
    public boolean handleMessage(SOAPMessageContext context) {
        Boolean isOutbound = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);

        if (!isOutbound) { // Process only incoming requests
            try {
                Map<String, List<String>> httpHeaders = (Map<String, List<String>>) context.get(MessageContext.HTTP_REQUEST_HEADERS);

                if (httpHeaders == null || !httpHeaders.containsKey("Authorization")) {
                    throwAuthFault("Missing Authorization Header");
                }

                String authHeader = httpHeaders.get("Authorization").get(0);

                if (authHeader == null || !authHeader.startsWith("Basic ")) {
                    throwAuthFault("Invalid Authorization Header Format");
                }

                // Decode and validate credentials
                String base64Credentials = authHeader.substring(6).trim();
                String credentials = new String(Base64.getDecoder().decode(base64Credentials));
                String[] values = credentials.split(":", 2);

                if (values.length != 2 || !values[0].equals(VALID_USERNAME) || !values[1].equals(VALID_PASSWORD)) {
                    throwAuthFault("Invalid Username or Password");
                }

            } catch (Exception e) {
                throwAuthFault("Authentication Error: " + e.getMessage());
            }
        }
        return true;
    }

    private void throwAuthFault(String message) throws SOAPException {
        SOAPFault fault = SOAPFactory.newInstance().createFault();
        fault.setFaultString(message);
        throw new SOAPFaultException(fault);
    }

    @Override
    public boolean handleFault(SOAPMessageContext context) {
        return true;
    }

    @Override
    public void close(MessageContext context) {}

    @Override
    public Set<QName> getHeaders() {
        return null;
    }
}

import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.xml.ws.handler.soap.SOAPMessageContext;
import javax.xml.ws.handler.soap.SOAPHandler;
import javax.xml.ws.handler.soap.SOAPMessageContext;
import javax.xml.ws.handler.HandlerChain;

@WebService
@HandlerChain(file = "handler-chain.xml")  // Reference handler configuration
public class MySoapService {

    @WebMethod
    public String processRequest(String input) {
        return "Authenticated request received: " + input;
    }
}


<?xml version="1.0" encoding="UTF-8"?>
<javaee:handler-chains xmlns:javaee="http://java.sun.com/xml/ns/javaee">
    <javaee:handler-chain>
        <javaee:handler>
            <javaee:handler-class>BasicAuthHandler</javaee:handler-class>
        </javaee:handler>
    </javaee:handler-chain>
</javaee:handler-chains>
