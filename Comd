npm init -y  # Initialize package.json if not already done
npm install --save-dev webpack webpack-cli webpack-dev-server babel-loader @babel/core @babel/preset-env @babel/preset-react style-loader css-loader file-loader electron electron-builder
npm run build  # Bundle the app using Webpack
npm run dist   # Package your Electron app and create a .exe
npm run start-electron  # Start Electron in development mode


const path = require('path');

module.exports = {
  entry: {
    main: './src/index.js',  // This is your React entry point
  },
  target: 'electron-renderer',  // Make sure Webpack targets Electron renderer
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: '[name].bundle.js',  // Output the bundle
  },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env', '@babel/preset-react'],
          },
        },
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader'],
      },
      {
        test: /\.(png|svg|jpg|jpeg|gif)$/i,
        use: ['file-loader'],
      },
    ],
  },
  resolve: {
    extensions: ['.js', '.jsx'],
  },
  devtool: 'source-map',  // Enable source maps for easier debugging
};

const { app, BrowserWindow } = require('electron');
const path = require('path');

let mainWindow;

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true,  // Enable Node.js integration (if needed)
      contextIsolation: false,
    },
  });

  mainWindow.loadURL(`file://${path.join(__dirname, '../public/index.html')}`); // Or use 'dist/index.html' based on your build setup

  mainWindow.on('closed', () => {
    mainWindow = null;
  });
}

app.on('ready', createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

{
  "scripts": {
    "start": "webpack serve --mode development",  // For development mode, with live-reloading
    "build": "webpack --mode production",  // For production build
    "package": "electron-builder",  // Use this command to build the .exe
    "start-electron": "electron .",  // Run Electron with the built app
    "dist": "webpack && electron-builder"  // Package the app (bundles + creates .exe)
  }
}

{
  "build": {
    "appId": "com.example.app",
    "productName": "YourAppName",
    "directories": {
      "output": "dist"  // The folder where the build output will go
    },
    "win": {
      "target": "nsis",  // You can choose other targets like "zip", "msi", etc.
      "icon": "path/to/icon.ico"  // Optional: provide an icon for the .exe file
    }
  }
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>My Electron React App</title>
    <link rel="stylesheet" href="%PUBLIC_URL%/styles.css" />
</head>
<body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>  <!-- React App Renders Here -->
</body>
</html>

