


⸻

2. Key Challenges in Migration to Azure PostgreSQL (Flexible Server)

A. Schema & Data Type Conversion
	•	Issue: PostgreSQL has different data types than MySQL, SQL Server, and Oracle.
	•	Examples:
	•	NUMBER(p,s) (Oracle) → NUMERIC(p,s) (PostgreSQL)
	•	DATETIME (MySQL) → TIMESTAMP (PostgreSQL)
	•	IDENTITY(1,1) (SQL Server) → SERIAL (PostgreSQL)
	•	Solution:
	•	Use Azure Database Migration Service (DMS) for schema conversion.
	•	Perform a dry run in a staging Flexible Server instance before production migration.

B. Indexing & Query Performance Optimization
	•	Issue: PostgreSQL uses heap-based storage instead of clustered indexing (SQL Server).
	•	Best Practices:
	•	Use EXPLAIN ANALYZE to fine-tune queries.
	•	Optimize indexing with btree, GIN, BRIN indexes.
	•	Leverage pg_stat_statements for query insights.

C. Locking & Concurrency Control Challenges
	•	Issue: PostgreSQL locks entire rows rather than just index entries, impacting concurrency.
	•	Common Locking Issues & Solutions:

Locking Issue
Description
Mitigation Strategy
Long Transactions
Holding locks too long affects performance
Use shorter transactions, commit frequently
Deadlocks
Circular waits between transactions
Order operations consistently, avoid unnecessary locks
Table Locking
Full table locks on ALTER TABLE
Schedule schema changes during low-traffic hours


Enable row-level locking for OLTP workloads.
	•	Implement optimistic concurrency control using SELECT FOR UPDATE SKIP LOCKED.

D. Deadlock Detection & Resolution
	•	Issue: Deadlocks occur when transactions wait for each other’s locks indefinitely.
	•	Solution:
	•	Enable log_lock_waits for monitoring.
	•	Use deadlock_timeout parameter to proactively handle lock contention.
	•	Refactor queries to reduce lock contention on frequently updated tables.

E. Transaction Isolation & Consistency
	•	Issue: PostgreSQL’s default isolation level (READ COMMITTED) differs from some RDBMS defaults.
	•	Solution:
	•	Set the isolation level explicitly in applications (SET TRANSACTION ISOLATION LEVEL).
	•	Use REPEATABLE READ to prevent lost updates in high-concurrency scenarios.

F. Connection Management & Scaling Challenges
	•	Issue: PostgreSQL’s process-based architecture limits the number of concurrent connections.
	•	Solution:
	•	Use PgBouncer to manage connection pooling.
	•	Optimize work_mem and max_connections settings based on workload.
	•	Scale up compute resources dynamically in Flexible Server.

G. Migration Downtime & Data Sync Issues
	•	Issue: Full migrations can cause downtime if not planned correctly.
	•	Solution:
	•	Use DMS for continuous data replication before cutover.
	•	Implement Change Data Capture (CDC) for near-zero downtime.
	•	Test migration in a staging Flexible Server instance before final deployment.

H. Authentication & Security Adjustments
	•	Issue: PostgreSQL’s role-based authentication differs from SQL Server & Oracle.
	•	Solution:
	•	Use Azure Active Directory (AAD) authentication.
	•	Enforce SSL/TLS encryption for all connections.
	•	Configure pg_hba.conf for strict access control.

⸻

3. Best Practices for Migration to Azure PostgreSQL (Flexible Server)

A. Pre-Migration Planning
	•	Conduct a workload assessment using Azure SQL Migration Assessment Tool.
	•	Identify complex queries and stored procedures requiring refactoring.
	•	Design a rollback strategy in case of migration issues.

B. Choosing the Right Compute & Storage Options
	•	General Purpose (GP): Best for medium workloads.
	•	Memory Optimized (MO): Ideal for high-query workloads needing large caches.
	•	Burstable (B): Cost-efficient for infrequent workloads.

C. Schema Migration & Optimization
	•	Use DMS for schema conversion.
	•	Implement partitioning (pg_partman) for large tables.
	•	Tune autovacuum settings for high-write workloads.

D. Performance Tuning & Query Optimization
	•	Use pg_stat_activity to monitor active sessions.
	•	Enable pg_stat_statements for tracking slow queries.
	•	Regularly VACUUM ANALYZE to optimize query plans.

E. Connection Pooling & Load Balancing
	•	Use PgBouncer for session pooling.
	•	Distribute read workloads using read replicas.
	•	Configure Azure Load Balancer for traffic management.

F. Post-Migration Monitoring & Maintenance
	•	Use Azure Monitor and Query Performance Insight for monitoring.
	•	Schedule regular reindexing to maintain performance.
	•	Enable automatic failover for HA in production workloads.

⸻

4. Conclusion

Migrating to Azure Database for PostgreSQL (Flexible Server) unlocks cost savings, scalability, and managed service benefits, but requires careful planning to address differences in locking, transaction handling, and query performance.

By following best practices in schema migration, query optimization, connection pooling, and high availability configurations, organizations can ensure a seamless and efficient transition to PostgreSQL Flexible Server with minimal downtime and maximum performance.

Would you like a step-by-step migration checklist or detailed PostgreSQL parameter tuning recommendations for Flexible Server?


Issue: PostgreSQL follows MVCC (Multi-Version Concurrency Control), unlike other databases that rely on different locking mechanisms.
	•	Examples:
	•	SQL Server uses Row-Level Locks and Pessimistic Concurrency by default.
	•	MySQL (InnoDB) uses both row-level locking and gap locking for transactions.
	•	PostgreSQL never locks reads (uses MVCC), which can lead to dead tuples and bloat if not vacuumed properly.
	•	Solution:
	•	Optimize autovacuum settings to prevent bloat (adjust vacuum_cost_delay and work_mem).
	•	Use FOR UPDATE SKIP LOCKED or FOR SHARE to prevent unnecessary blocking.
	•	Monitor deadlocks using pg_locks and pg_stat_activity.

⸻

I. Differences in Transaction Isolation Levels
	•	Issue: PostgreSQL supports READ COMMITTED (default), REPEATABLE READ, and SERIALIZABLE, which behave differently from other RDBMSs.
	•	Example:
	•	SQL Server’s READ UNCOMMITTED (dirty reads) has no direct PostgreSQL equivalent.
	•	PostgreSQL does not support table-level snapshot isolation like Oracle.
	•	Solution:
	•	Review existing transaction isolation levels and match them appropriately.
